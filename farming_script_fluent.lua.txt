-- Remove existing GUI
local CoreGui = game:GetService("CoreGui")
local obsidian = "Obsidian"
local fluentName = "FluentCore"

for _, v in ipairs(CoreGui:GetDescendants()) do
    if v:IsA("ScreenGui") and (v.Name == obsidian or v.Name == fluentName) then
        v:Destroy()
    end
end

-- Load Fluent Library
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

-- Services
local player = game.Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Variables
local autoSubmit = false
local fruitThreshold = 10
local autoSell = false
local highlightToggle = false
local currentHighlight = nil
local currentBillboard = nil
local lastBiggest = nil
local flyEnabled = false
local noclipEnabled = false
local speedwalkEnabled = false
local speedValue = 16
local flyConn, noclipConn, speedConn
local autoBuySeeds = false
local savedPosition = nil
local antiAfkEnabled = false
local afkConnection
local minWeight, maxWeight = 0, 9999
local instantCollectEnabled = false
local infiniteJump = false
local conn

-- Helper Functions
local function getOwnFarmSpawnCFrame()
    for _, farm in ipairs(workspace.Farm:GetChildren()) do
        local important = farm:FindFirstChild("Important")
        local data = important and important:FindFirstChild("Data")
        local owner = data and data:FindFirstChild("Owner")
        if owner and owner.Value == player.Name then
            local spawnPoint = farm:FindFirstChild("Spawn_Point")
            if spawnPoint and spawnPoint:IsA("BasePart") then
                return spawnPoint.CFrame
            end
        end
    end
    return nil
end

local function submitSummer()
    while autoSubmit do
        game:GetService("ReplicatedStorage")
            :WaitForChild("GameEvents")
            :WaitForChild("SummerHarvestRemoteEvent")
            :FireServer("SubmitHeldPlant")
        task.wait(0.1)
    end
end

local function keysOf(dict)
    local list = {}
    for k, v in pairs(dict) do
        if v then
            table.insert(list, k)
        end
    end
    return list
end

local function tpAndSell()
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if hrp then
        local returnCFrame = getOwnFarmSpawnCFrame()
        hrp.CFrame = CFrame.new(
            86.5854721, 2.76619363, 0.426784277,
            0, 0, -1,
            0, 1, 0,
            1, 0, 0
        )
        task.wait(0.2)
        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
        Fluent:Notify({Title = "Success", Content = "Teleported and sold inventory!", Duration = 3})
        if returnCFrame then
            task.wait(0.2)
            hrp.CFrame = returnCFrame
            Fluent:Notify({Title = "Success", Content = "Returned to your garden spawn point!", Duration = 3})
        else
            Fluent:Notify({Title = "Warning", Content = "Could not find your garden spawn point!", Duration = 3})
        end
    else
        Fluent:Notify({Title = "Error", Content = "HumanoidRootPart not found!", Duration = 3})
    end
end

local function getFruitCount()
    local bag = player.Backpack
    local count = 0
    for _, v in pairs(bag:GetChildren()) do
        if v:FindFirstChild("Weight") and v:FindFirstChild("Variant") then
            count = count + 1
        end
    end
    return count
end

local function removeHighlight()
    if currentHighlight then
        currentHighlight:Destroy()
        currentHighlight = nil
    end
    if currentBillboard then
        currentBillboard:Destroy()
        currentBillboard = nil
    end
end

local function highlightBiggestFruit()
    local farm = nil
    for _, f in ipairs(workspace.Farm:GetChildren()) do
        local important = f:FindFirstChild("Important")
        local data = important and important:FindFirstChild("Data")
        local owner = data and data:FindFirstChild("Owner")
        if owner and owner.Value == player.Name then
            farm = f
            break
        end
    end
    if not farm then
        removeHighlight()
        lastBiggest = nil
        return
    end

    local plants = farm:FindFirstChild("Important") and farm.Important:FindFirstChild("Plants_Physical")
    if not plants then
        removeHighlight()
        lastBiggest = nil
        return
    end

    local biggest, maxWeight = nil, -math.huge
    for _, fruit in ipairs(plants:GetChildren()) do
        local weightObj = fruit:FindFirstChild("Weight")
        if weightObj and tonumber(weightObj.Value) and tonumber(weightObj.Value) > maxWeight then
            biggest = fruit
            maxWeight = tonumber(weightObj.Value)
        end
    end

    if biggest ~= lastBiggest then
        removeHighlight()
        lastBiggest = biggest
        if biggest and biggest:IsA("Model") then
            local highlight = Instance.new("Highlight")
            highlight.FillColor = Color3.fromRGB(0, 255, 0)
            highlight.OutlineColor = Color3.fromRGB(0, 150, 0)
            highlight.FillTransparency = 0.3
            highlight.OutlineTransparency = 0
            highlight.Adornee = biggest
            highlight.Parent = biggest
            currentHighlight = highlight

            local head = biggest:FindFirstChildWhichIsA("BasePart")
            if head then
                local bb = Instance.new("BillboardGui")
                bb.Size = UDim2.new(0, 100, 0, 40)
                bb.AlwaysOnTop = true
                bb.StudsOffset = Vector3.new(0, 3, 0)
                bb.Adornee = head
                bb.Parent = head

                local label = Instance.new("TextLabel")
                label.Size = UDim2.new(1, 0, 1, 0)
                label.BackgroundTransparency = 1
                label.TextColor3 = Color3.fromRGB(0, 255, 0)
                label.TextStrokeTransparency = 0.2
                label.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
                label.TextScaled = true
                label.Font = Enum.Font.FredokaOne
                label.Text = "Weight: " .. string.format("%.2f", maxWeight) .. "kg"
                label.Parent = bb

                currentBillboard = bb
            end
        end
    end
end

local function getShopSeeds()
    local playerGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    local seedShopGui = playerGui:WaitForChild("Seed_Shop")
    local seedsFrame = seedShopGui:WaitForChild("Frame"):WaitForChild("ScrollingFrame")

    local seedList = {}
    table.insert(seedList, "All")

    for _, seedFrame in pairs(seedsFrame:GetChildren()) do
        if seedFrame:IsA("Frame") then
            local mainFrame = seedFrame:FindFirstChild("Main_Frame")
            if mainFrame then
                local seedText = mainFrame:FindFirstChild("Seed_Text")
                if seedText and seedText:IsA("TextLabel") then
                    local rawName = seedText.Text or ""
                    local cleaned = rawName:gsub("%s*[sS]eed%s*", ""):gsub("^%s*(.-)%s*$", "%1")
                    table.insert(seedList, cleaned)
                end
            end
        end
    end
    return seedList
end

local function getGearShop()
    local playerGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    local gearShopGui = playerGui:WaitForChild("Gear_Shop")
    local gearsFrame = gearShopGui:WaitForChild("Frame"):WaitForChild("ScrollingFrame")

    local gearList = {"All"}
    for _, gearFrame in pairs(gearsFrame:GetChildren()) do
        if gearFrame:IsA("Frame") then
            local mainFrame = gearFrame:FindFirstChild("Main_Frame")
            if mainFrame then
                local gearText = mainFrame:FindFirstChild("Gear_Text")
                if gearText and gearText:IsA("TextLabel") then
                    table.insert(gearList, gearText.Text)
                end
            end
        end
    end
    return gearList
end

local function savePosition()
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if hrp then
        savedPosition = hrp.Position
        Fluent:Notify({Title = "Success", Content = "Position saved!", Duration = 3})
    else
        Fluent:Notify({Title = "Error", Content = "Could not save position (HumanoidRootPart missing).", Duration = 3})
    end
end

local function teleportTo(pos)
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then
        Fluent:Notify({Title = "Error", Content = "Could not teleport (HumanoidRootPart missing).", Duration = 3})
        return
    end
    if typeof(pos) == "Vector3" then
        hrp.CFrame = CFrame.new(pos)
    elseif typeof(pos) == "string" then
        local x, y, z = string.match(pos, "Vector3%s*%(([^,]+),%s*([^,]+),%s*([^)]+)%)")
        if x and y and z then
            hrp.CFrame = CFrame.new(tonumber(x), tonumber(y), tonumber(z))
        end
    end
end

local function sellInventory()
    ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
    Fluent:Notify({Title = "Success", Content = "Inventory sold!", Duration = 3})
end

local function submitNightQuest()
    ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("NightQuestRemoteEvent"):FireServer("SubmitAllPlants")
    Fluent:Notify({Title = "Success", Content = "Submitted all plants for Night Quest!", Duration = 3})
end

local function teleportSellReturn()
    savePosition()
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    hrp.CFrame = CFrame.new(86.57965850830078, 2.999999761581421, 0.4267919063568115)
    task.wait(0.25)
    sellInventory()
    task.wait(0.2)
    if savedPosition then
        teleportTo(savedPosition)
        Fluent:Notify({Title = "Success", Content = "Returned to saved position!", Duration = 3})
    end
end

local function teleportNightQuestReturn()
    savePosition()
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    hrp.CFrame = CFrame.new(-101.0422592163086, 4.400012493133545, -10.985257148742676)
    task.wait(0.25)
    submitNightQuest()
    task.wait(0.2)
    if savedPosition then
        teleportTo(savedPosition)
        Fluent:Notify({Title = "Success", Content = "Returned to saved position!", Duration = 3})
    end
end

local function harvestFilter(obj, minW, maxW)
    local weightObj = obj:FindFirstChild("Weight")
    if not weightObj then return false end
    local weight = tonumber(weightObj.Value)
    if not weight then return false end
    return weight >= minW and weight <= maxW
end

-- Create Window
local Window = Fluent:CreateWindow({
    Title = "Zumaru Hub",
    SubTitle = "by Zumaru Hub",
    TabWidth = 160,
    Theme = "Darker",
    Acrylic = false,
    Size = UDim2.fromOffset(500, 320),
    MinimizeKey = Enum.KeyCode.End
})

-- Create Tabs
local MainTab = Window:AddTab({Title = "Main", Icon = "home"})
local ShopTab = Window:AddTab({Title = "Shop", Icon = "shopping-cart"})
local EventTab = Window:AddTab({Title = "Event", Icon = "calendar"})
local PlayerTab = Window:AddTab({Title = "Player", Icon = "user"})

-- Main Tab
local TeleportSection = MainTab:AddSection("Teleport")
local FruitSection = MainTab:AddSection("Fruit Management")
local HarvestSection = MainTab:AddSection("Auto Harvest")
local AntiAFKSection = MainTab:AddSection("Anti-AFK")

-- Teleport Section
TeleportSection:AddButton({
    Title = "Save Position",
    Description = "Save current position",
    Callback = savePosition
})

TeleportSection:AddButton({
    Title = "Teleport to Saved Position",
    Description = "Teleport to previously saved position",
    Callback = function()
        if savedPosition then
            teleportTo(savedPosition)
            Fluent:Notify({Title = "Success", Content = "Teleported to saved position!", Duration = 3})
        else
            Fluent:Notify({Title = "Warning", Content = "No position saved yet.", Duration = 3})
        end
    end
})

-- Fruit Section
local FruitSlider = FruitSection:AddSlider("FruitThreshold", {
    Title = "Fruit Threshold",
    Description = "Auto sell when fruit count reaches this value",
    Default = 10,
    Min = 1,
    Max = 200,
    Rounding = 0,
    Callback = function(Value)
        fruitThreshold = Value
    end
})

local AutoSellToggle = FruitSection:AddToggle("AutoSell", {
    Title = "Auto Sell",
    Description = "Automatically teleport and sell when threshold is reached",
    Default = false,
    Callback = function(Value)
        autoSell = Value
        if autoSell then
            Fluent:Notify({Title = "Success", Content = "Auto TP & Sell enabled.", Duration = 3})
            task.spawn(function()
                while autoSell do
                    if getFruitCount() >= fruitThreshold then
                        tpAndSell()
                        task.wait(2)
                    end
                    task.wait(1)
                end
            end)
        else
            Fluent:Notify({Title = "Info", Content = "Auto TP & Sell disabled.", Duration = 3})
        end
    end
})

local ShowBiggestToggle = FruitSection:AddToggle("ShowBiggest", {
    Title = "Show Biggest Fruit",
    Description = "Highlight the biggest fruit in your farm",
    Default = false,
    Callback = function(Value)
        highlightToggle = Value
        if highlightToggle then
            highlightBiggestFruit()
            conn = RunService.RenderStepped:Connect(function()
                if highlightToggle then
                    highlightBiggestFruit()
                end
            end)
        else
            if conn then conn:Disconnect() end
            removeHighlight()
            lastBiggest = nil
        end
    end
})

FruitSection:AddButton({
    Title = "Sell Inventory",
    Description = "Sell all items in inventory",
    Callback = sellInventory
})

FruitSection:AddButton({
    Title = "TP, Sell, Return",
    Description = "Teleport to shop, sell, and return",
    Callback = teleportSellReturn
})

-- Harvest Section
local MinWeightSlider = HarvestSection:AddSlider("MinWeight", {
    Title = "Min Weight (kg)",
    Description = "Minimum weight to harvest",
    Default = 0,
    Min = 0,
    Max = 9999,
    Rounding = 2,
    Callback = function(Value)
        minWeight = Value
    end
})

local MaxWeightSlider = HarvestSection:AddSlider("MaxWeight", {
    Title = "Max Weight (kg)",
    Description = "Maximum weight to harvest",
    Default = 9999,
    Min = 0,
    Max = 9999,
    Rounding = 2,
    Callback = function(Value)
        maxWeight = Value
    end
})

local AutoCollectToggle = HarvestSection:AddToggle("AutoCollect", {
    Title = "Auto Collect",
    Description = "Automatically collect fruits within weight range",
    Default = false,
    Callback = function(Value)
        instantCollectEnabled = Value
        if instantCollectEnabled then
            Fluent:Notify({Title = "Success", Content = "Auto collect enabled!", Duration = 3})
            task.spawn(function()
                while instantCollectEnabled do
                    local players = game:GetService("Players")
                    local replicated_storage = game:GetService("ReplicatedStorage")
                    local get_farm = require(replicated_storage.Modules.GetFarm)
                    local byte_net_reliable = replicated_storage:WaitForChild("ByteNetReliable")
                    local buffer = buffer.fromstring("\1\1\0\1")

                    local local_player = players.LocalPlayer
                    local farm = get_farm(local_player)
                    if not farm or not farm.Important or not farm.Important:FindFirstChild("Plants_Physical") then
                        break
                    end

                    for _, v in next, farm.Important.Plants_Physical:GetChildren() do
                        if harvestFilter(v, minWeight, maxWeight) then
                            byte_net_reliable:FireServer(buffer, { v })
                        end
                        if v:FindFirstChild("Fruits", true) then
                            for _, i in next, v.Fruits:GetChildren() do
                                if harvestFilter(i, minWeight, maxWeight) then
                                    byte_net_reliable:FireServer(buffer, { i })
                                end
                            end
                        end
                    end
                    task.wait(2)
                end
            end)
        else
            Fluent:Notify({Title = "Info", Content = "Auto collect disabled!", Duration = 3})
        end
    end
})

-- Anti-AFK Section
local AntiAFKToggle = AntiAFKSection:AddToggle("AntiAFK", {
    Title = "Anti-AFK",
    Description = "Prevent getting kicked for being idle",
    Default = false,
    Callback = function(Value)
        antiAfkEnabled = Value
        if antiAfkEnabled then
            afkConnection = player.Idled:Connect(function()
                local VirtualUser = game:GetService("VirtualUser")
                VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                task.wait(1)
                VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
            end)
            Fluent:Notify({Title = "Success", Content = "Anti-AFK enabled!", Duration = 3})
        else
            if afkConnection then
                afkConnection:Disconnect()
                afkConnection = nil
            end
            Fluent:Notify({Title = "Info", Content = "Anti-AFK disabled!", Duration = 3})
        end
    end
})

-- Player Tab
local MovementSection = PlayerTab:AddSection("Movement")
local JumpSection = PlayerTab:AddSection("Jump")

-- Movement Section
local SpeedSlider = MovementSection:AddSlider("Speed", {
    Title = "Walk Speed",
    Description = "Change walking speed",
    Default = 16,
    Min = 16,
    Max = 100,
    Rounding = 0,
    Callback = function(Value)
        speedValue = Value
        if speedwalkEnabled then
            local char = player.Character or player.CharacterAdded:Wait()
            local hum = char:FindFirstChildOfClass("Humanoid")
            if hum then
                hum.WalkSpeed = speedValue
            end
        end
    end
})

local SpeedwalkToggle = MovementSection:AddToggle("Speedwalk", {
    Title = "Speed Walk",
    Description = "Enable fast walking",
    Default = false,
    Callback = function(Value)
        speedwalkEnabled = Value
        local char = player.Character or player.CharacterAdded:Wait()
        local hum = char:FindFirstChildOfClass("Humanoid")
        if speedwalkEnabled and hum then
            hum.WalkSpeed = speedValue
            speedConn = char.ChildAdded:Connect(function(child)
                if child:IsA("Humanoid") then
                    child.WalkSpeed = speedValue
                end
            end)
            Fluent:Notify({Title = "Success", Content = "Speedwalk enabled.", Duration = 3})
        else
            if hum then hum.WalkSpeed = 16 end
            if speedConn then speedConn:Disconnect() speedConn = nil end
            Fluent:Notify({Title = "Info", Content = "Speedwalk disabled.", Duration = 3})
        end
    end
})

local NoclipToggle = MovementSection:AddToggle("Noclip", {
    Title = "Noclip",
    Description = "Walk through walls",
    Default = false,
    Callback = function(Value)
        noclipEnabled = Value
        if noclipEnabled then
            noclipConn = game:GetService("RunService").Stepped:Connect(function()
                local char = player.Character
                if char then
                    for _, part in ipairs(char:GetDescendants()) do
                        if part:IsA("BasePart") and part.CanCollide then
                            part.CanCollide = false
                        end
                    end
                end
            end)
            Fluent:Notify({Title = "Success", Content = "Noclip enabled.", Duration = 3})
        else
            if noclipConn then noclipConn:Disconnect() noclipConn = nil end
            local char = player.Character
            if char then
                for _, part in ipairs(char:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
            Fluent:Notify({Title = "Info", Content = "Noclip disabled.", Duration = 3})
        end
    end
})

-- Jump Section
local InfiniteJumpToggle = JumpSection:AddToggle("InfiniteJump", {
    Title = "Infinite Jump",
    Description = "Jump infinitely in the air",
    Default = false,
    Callback = function(Value)
        infiniteJump = Value
    end
})

UserInputService.JumpRequest:Connect(function()
    if infiniteJump then
        local character = player.Character
        local humanoid = character and character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)

-- Shop Tabf
-- Seed Shop Section
local selectedSeed = "Strawberry"
local seedToggle = false
local seedThread = nil

local seedList = {
"Carrot",
"Strawberry",
"Blueberry",
"Tomato",
"Cauliflower",
"Watermelon",
"Rafflesia",
"Green Apple",
"Avocado",
"Banana",
"Pineapple",
"Kiwi",
"Bell Pepper",
"Prickly Pear",
"Loquat",
"Feijoa",
"Pitcher Plant",
"Sugar Apple"
}

    local Dropdown = ShopTab:AddDropdown("SeedSelectDropdown", {
    Title = "Select seed",
    Values = seedList,
    Multi = false,
    Default = 1,
})

Dropdown:OnChanged(function(val)
    selectedSeed = val
end)

local Toggle = ShopTab:AddToggle("AutoBuySeedSelectedToggle", {
    Title = "Auto buy select seed",
    Default = false
})

Toggle:OnChanged(function(state)
    seedToggle = state
    if seedThread then task.cancel(seedThread) end
    if state then
        seedThread = task.spawn(function()
            while seedToggle do
                game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("BuySeedStock"):FireServer(selectedSeed)
                task.wait(0.1)
            end
        end)
    end
end)


local allSeedToggle = false
local allSeedThread = nil

local Toggle = ShopTab:AddToggle("AutoBuySeedAllToggle", {
    Title = "Auto buy all seed",
    Default = false
})

Toggle:OnChanged(function(state)
    allSeedToggle = state
    if allSeedThread then task.cancel(allSeedThread) end
    if state then
        allSeedThread = task.spawn(function()
            while allSeedToggle do
                for _, item in ipairs(seedList) do
                    if not allSeedToggle then break end
                    game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("BuySeedStock"):FireServer(item)
                    task.wait(0.1)
                end
            end
        end)
    end
end)





local selectedGear = "Watering Can"
local gearToggle = false
local gearThread = nil

local gearList = {
	"Watering Can",
	"Trowel",
	"Basic Sprinkler",
	"Advanced Sprinkler",
	"Godly Sprinkler",
	 "Master Sprinkler",
	"Favorite Tool",
	"Recall Wrench",
	"Harvest Tool",
	"Friendship Pot",
	"Cleaning Spray",
	"Tanning Mirror",
	"Magnifying Glass"
}

    local Dropdown = ShopTab:AddDropdown("GearSelectDropdown", {
    Title = "Select gear",
    Values = gearList,
    Multi = false,
    Default = 1,
})

Dropdown:OnChanged(function(val)
    selectedGear = val
end)

local Toggle = ShopTab:AddToggle("AutoBuyGearSelectedToggle", {
    Title = "Auto buy select gear",
    Default = false
})

Toggle:OnChanged(function(state)
    gearToggle = state
    if gearThread then task.cancel(gearThread) end
    if state then
        gearThread = task.spawn(function()
            while gearToggle do
                game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("BuyGearStock"):FireServer(selectedGear)
                task.wait(0.1)
            end
        end)
    end
end)


local allGearToggle = false
local allGearThread = nil

local Toggle = ShopTab:AddToggle("AutoBuyGearAllToggle", {
    Title = "Auto buy all gear",
    Default = false
})

Toggle:OnChanged(function(state)
    allGearToggle = state
    if allGearThread then task.cancel(allGearThread) end
    if state then
        allGearThread = task.spawn(function()
            while allGearToggle do
                for _, item in ipairs(gearList) do
                    if not allGearToggle then break end
                    game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("BuyGearStock"):FireServer(item)
                    task.wait(0.1)
                end
            end
        end)
    end
end)











-- Pet Section
local AutoBuyPetsToggle = ShopTab:AddToggle("AutoBuyPets", {
    Title = "Auto Buy All Eggs",
    Description = "Automatically buy pet eggs",
    Default = false,
    Callback = function(Value)
        local autoBuyPetsToggle = Value
        if autoBuyPetsToggle then
            Fluent:Notify({Title = "Success", Content = "Auto buy pets enabled.", Duration = 3})
            task.spawn(function()
                while autoBuyPetsToggle do
                    for i = 1, 3 do
                        for _, pet in ipairs({1, 2, 3}) do
                            ReplicatedStorage.GameEvents.BuyPetEgg:FireServer(pet)
                            task.wait()
                        end
                    end
                    task.wait(60)
                end
            end)
        else
            Fluent:Notify({Title = "Info", Content = "Auto buy pets disabled.", Duration = 3})
        end
    end
})

-- UI Section
UISection:AddButton({
    Title = "Toggle Cosmetic Shop",
    Description = "Show/Hide cosmetic shop UI",
    Callback = function()
        local ui = player.PlayerGui:FindFirstChild("CosmeticShop_UI")
        if ui then
            ui.Enabled = not ui.Enabled
            Fluent:Notify({Title = "Info", Content = "Cosmetic Shop UI: " .. (ui.Enabled and "Enabled" or "Disabled"), Duration = 3})
        end
    end
})

UISection:AddButton({
    Title = "Toggle Gear Shop",
    Description = "Show/Hide gear shop UI",
    Callback = function()
        local ui = player.PlayerGui:FindFirstChild("Gear_Shop")
        if ui then
            ui.Enabled = not ui.Enabled
            Fluent:Notify({Title = "Info", Content = "Gear Shop UI: " .. (ui.Enabled and "Enabled" or "Disabled"), Duration = 3})
        end
    end
})

UISection:AddButton({
    Title = "Toggle Seed Shop",
    Description = "Show/Hide seed shop UI",
    Callback = function()
        local ui = player.PlayerGui:FindFirstChild("Seed_Shop")
        if ui then
            ui.Enabled = not ui.Enabled
            Fluent:Notify({Title = "Info", Content = "Seed Shop UI: " .. (ui.Enabled and "Enabled" or "Disabled"), Duration = 3})
        end
    end
})